#!/usr/local/bin/perl

# Copyright (c) 2010-2011 Yahoo! Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;
use PasswordMonkey;
use Term::ReadKey;
use Log::Log4perl qw(:easy);
use PasswordMonkey::Filler::PogoPassword;
use PasswordMonkey::Filler::PogoPassphrase;
use PasswordMonkey::Filler::PogoGPG;
use PasswordMonkey::Bouncer::Wait;
use Getopt::Std;

getopts( "vq", \my %opts );

my $level = $ERROR;
$level = $DEBUG if $opts{v};
$level = $OFF   if $opts{q};

if( $opts{v} ) {
    $Expect::Exp_Internal = 1;
}

Log::Log4perl->easy_init({ level => $level, layout => "%m%n" });

DEBUG "$0: Reading parameters";

 # Get parameters from STDIN
my $timeout = <STDIN>;
chomp $timeout;

DEBUG "$0: timeout=$timeout";

my $passwd  = <STDIN>;
chomp $passwd;

DEBUG "$0: Got passwd";

my $passphrase = <STDIN>;
chomp $passphrase;

DEBUG "$0: Got passphrase";

DEBUG "$0: Setting up fillers";

my $monkey = PasswordMonkey->new(
    timeout => $timeout 
);
my $waiter = PasswordMonkey::Bouncer::Wait->new( seconds => 2 );

my $pwfiller = PasswordMonkey::Filler::PogoPassword->new(
    password => sub { unpack 'u', $passwd }
);
$pwfiller->bouncer_add( $waiter );
$monkey->filler_add( $pwfiller );

my $ppfiller = PasswordMonkey::Filler::PogoPassphrase->new(
    password => sub { unpack 'u', $passphrase }
);
$ppfiller->bouncer_add( $waiter );
$monkey->filler_add( $ppfiller );

my $gpgfiller = PasswordMonkey::Filler::PogoGPG->new();
$monkey->filler_add( $gpgfiller );

$monkey->spawn( @ARGV );
$monkey->go();

if( ! $monkey->is_success ) {
    if( $monkey->timed_out ) {
        ERROR "$0: Timed out";
        exit 254;
    } else {
        ERROR "$0: Error: ", $monkey->exit_status();
        my $exit_code = ($monkey->exit_status() >> 8);
        ERROR "$0: Exit code $exit_code";
        exit $exit_code;
    }
}

INFO "$0 done.";

__END__

=head1 NAME

    pogo-pw - Run a command and fill in password prompts

=head1 SYNOPSIS

    echo "timeout\nuupasswd\n" pogo-pw command args

=head1 OPTIONS

=over 8

=item B<-v>

Be verbose.

=back

=head1 DESCRIPTION

C<pogo-pw> runs pogo commands and fills in password prompts automatically.

=head1 EXAMPLES

  $ pogo-pw sudo ls

=head1 COPYRIGHT

Apache 2.0

=head1 AUTHORS

  Andrew Sloane <andy@a1k0n.net>
  Ian Bettinger <ibettinger@yahoo.com>
  Michael Fischer <michael+pogo@dynamine.net>
  Mike Schilli <m@perlmeister.com>
  Nicholas Harteau <nrh@hep.cat>
  Nick Purvis <nep@noisetu.be>
  Robert Phan <robert.phan@gmail.com>
  Srini Singanallur <ssingan@yahoo.com>
  Yogesh Natarajan <yogesh_ny@yahoo.co.in>

