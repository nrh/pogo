#!/usr/bin/env perl

# Copyright (c) 2010-2011 Yahoo! Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# this dummy worker impersonates pogo-rexec for the test suite
# instead of actually executing anything, we validate args as pogo-rexec
# would and echo them back to the worker.
#
# additionally, we read in a yaml file describing a job, find the host
# in that file that we were asked to execute, and act accordingly

use 5.008;
use common::sense;

use Crypt::OpenSSL::RSA qw();
use Digest::MD5 qw(md5_base64);
use File::Slurp qw(read_file);
use Getopt::Long qw(GetOptions);
use IO::Handle;
use JSON qw(decode_json);
use Log::Log4perl qw(:easy);
use MIME::Base64 qw(decode_base64);
use POSIX qw(WEXITSTATUS);
use String::Glob::Permute qw(string_glob_permute);
use YAML::XS qw(LoadFile);

# {{{ execute
sub execute
{
  my ( $job, $host ) = @_;

  my $file = sprintf("jobs/t_job_%s.yaml", $job);
  if ( ! -r $file )
  {
    $file = "jobs/t_job.yaml";
  }
  my @entries;

  STDOUT->print("using '$file'");

  eval { @entries = LoadFile($file); };
  if ($@)
  {
    STDOUT->print("ERROR: $file: $@\n");
    return 127;
  }

  foreach my $entry (@entries)
  {

    # lazy, just find the first one
    my @hosts = string_glob_permute( $entry->{target} );
    next unless scalar grep { $_ eq $host } @hosts;

    STDOUT->print("found: $host in $entry->{target}\n");
    STDOUT->print("sleep: $entry->{after}\n");
    sleep $entry->{after};
    STDOUT->print("begin output\n");
    STDOUT->print( $entry->{output} );
    STDOUT->print("\nend output\n");
    STDOUT->print("exiting: $entry->{exit}\n");
    return $entry->{exit};
  }

  STDOUT->print("ERROR: host not found\n");
  return 127;
}

# }}}
# {{{ main

sub main
{
  my ( $args, $tmpfile, $exit_status, $opts );

  STDERR->autoflush(1);
  STDOUT->autoflush(1);

  GetOptions(
    'e|expect-wrapper=s' => sub { $opts->{expect_wrapper} = $_[1] },
    'k|ssl-key=s'        => sub { $opts->{worker_key}     = $_[1] },
  );

  STDOUT->print("expect-wrapper: $opts->{expect_wrapper}\n") if defined $opts->{expect_wrapper};
  STDOUT->print("ssl-key: $opts->{worker_key}\n")            if defined $opts->{expect_wrapper};

  unless ( -r $opts->{worker_key} )
  {
    STDOUT->print("ERROR: can't read private key\n");
  }

  if ( $opts->{private_key} =
    Crypt::OpenSSL::RSA->new_private_key( scalar read_file $opts->{worker_key} ) )
  {
    STDOUT->print("worker_key: OK\n");
  }
  else
  {
    STDOUT->print("ERROR: unable to load worker private key!\n");
  }

  # Read JSON-encoded args from STDIN.
  $args = decode_json( STDIN->getline() );

  # Check for required arguments
  for (qw(job_id command user run_as password host timeout))
  {
    unless ( defined $args->{$_} )
    {
      STDOUT->print("ERROR: missing required argument $_\n");
    }
  }

  my $pass;
  eval { $pass = pack( q{u}, $opts->{private_key}->decrypt( decode_base64( $args->{password} ) ) ); };
  eval { $pass = $opts->{private_key}->decrypt( decode_base64( $args->{password} ) ) };
  if ($@)
  {
    STDOUT->print("ERROR: couldn't decrypt: $@");
  }

  STDOUT->print("pass: $pass\n");
  STDOUT->print("job_id: $args->{job_id}\n");

  if ( ${ $args->{command} }[0] =~ /^POGOATTACHMENT!(.+)/s )
  {
    my $md5sum = md5_base64( decode_base64($1) );
    STDOUT->print("attachment md5sum: $md5sum\n");
    $args->{command}[0] = $md5sum;
  }

  # Prepend "sudo -u <user>" if we are running as someone else
  if ( $args->{run_as} ne $args->{user} )
  {
    STDOUT->print("run_as: $args->{run_as}\n");
  }

  STDOUT->print("user: $args->{user}\n");
  STDOUT->print("host: $args->{host}\n");
  my $cmd = join ' ', @{ $args->{command} };
  STDOUT->print("command: $cmd\n");

  return execute( $args->{job_id}, $args->{host} );
}

# }}}

exit main();

1;

=pod

=head1 NAME

  CLASSNAME - SHORT DESCRIPTION

=head1 SYNOPSIS

CODE GOES HERE

=head1 DESCRIPTION

LONG_DESCRIPTION

=head1 METHODS

B<methodexample>

=over 2

methoddescription

=back

=head1 SEE ALSO

L<Pogo::Dispatcher>

=head1 COPYRIGHT

Apache 2.0

=head1 AUTHORS

  Andrew Sloane <andy@a1k0n.net>
  Ian Bettinger <ibettinger@yahoo.com>
  Michael Fischer <michael+pogo@dynamine.net>
  Mike Schilli <m@perlmeister.com>
  Nicholas Harteau <nrh@hep.cat>
  Nick Purvis <nep@noisetu.be>
  Robert Phan <robert.phan@gmail.com>
  Srini Singanallur <ssingan@yahoo.com>
  Yogesh Natarajan <yogesh_ny@yahoo.co.in>

=cut

# vim:syn=perl:sw=2:ts=2:sts=2:et:fdm=marker
